/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/
nextflow.enable.moduleBinaries = true

params {

    // Pipeline parameters
    project_name          = "project"
    input_seurat          = "${baseDir}/data/project_Azimuth_annotation_object.RDS"
    // input_reference_table = "${baseDir}/data/OV_reference_table.csv"
    outdir             = "${launchDir}/results"
    // outdir                = "${baseDir}"
    // work_directory = "${baseDir}"
    workDir = "${baseDir}/work"

    // Notebooks
    input_seurat_object      = null
    notebook_batchcorr       = "${baseDir}/modules/local/batch_correction/notebook_batch_correctionR.qmd"

    // Optional template/config (if you use them)
    template                 = "${baseDir}/assets/template/*"
    page_config              = "${baseDir}/assets/template/_quarto.yml"

    // Integration controls
    input_integration_method = "all"     // all|cca|rpca|harmony|mnn
    input_target_variables   = "batch"    // comma-separated, e.g. "batch,site"
    input_batch_step         = "main"

    // Labeling
    exclude_labels           = "Epithelial"
    celltype_column          = "celltype"
    label_candidates         = "azimuth_labels,celltype,cell_type,annotation,cell_label"


    // Compute knobs
    n_threads                = 8
    n_memory                 = '100.GB'
    max_time                 = '240.h'
    n_hvgs                   = 3000
    n_pcs                    = 50

    // Behavior
    auto_save                = true
    seed                     = 1234



    // inferCNV parameters
    // input_analysis_mode   = 'samples'

    // Dataflow parameters
    skip_BatchCorr         = false
    // skip_infercnv         = false
    // skip_scevan           = false 
    // skip_copykat          = true

    // // Quarto parameters
    // page_config           = "${baseDir}/assets/template/_quarto.yml"
    // template              = "${baseDir}/assets/template/*"

    // // Max resource options
    max_cpus              = 10
    max_memory            = '100.GB'
    max_time              = '240.h'

}


def getContainerOptions (executor) {
    if (executor == 'docker') {
        return '-u root:root -e USERID=$UID -e XDG_CACHE_HOME=tmp/quarto_cache_home -e XDG_DATA_HOME=tmp/quarto_data_home -e QUARTO_PRINT_STACK=true'
    } else if (executor == 'singularity') {
        return '--env USERID=$UID --env XDG_CACHE_HOME=tmp/quarto_cache_home --env XDG_DATA_HOME=tmp/quarto_data_home --env QUARTO_PRINT_STACK=true'
    } else {
        return ''
    }
}

process {
    containerOptions = { getContainerOptions(workflow.containerEngine) }
    stageInMode = 'copy'
}


// Load nf-core custom profiles from different Institutions
profiles {
    docker {
        docker.enabled         = true
        docker.fixOwnership    = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mskcc_iris {
        singularity {
            enabled = true
            autoMounts = true
        }
        process {
            executor = 'slurm'
            queue = 'componc_cpu,componc_gpu'
        }
        executor {
            name = 'slurm'
            queueSize = 25
        }
    }
    
    test      { includeConfig 'conf/test.config' }
    seadragon { includeConfig 'conf/institution.config' }

}

// Load nf-core custom profiles from different Institutions
profiles {
   test { includeConfig 'conf/test.config' }
}

// Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}